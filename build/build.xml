<?xml version="1.0" encoding="UTF-8"?>
<project name="external-files-in-media-library" basedir="." default="help">

    <!-- Include config file containing  -->
    <loadproperties srcFile="build.properties" />

    <!-- Sets variables which can later be used. -->
    <property name="src.dir" location="../" />
    <property name="build.dir" location="../releases" />
    <property name="log.dir" location="./" />

    <!-- check for necessary vars -->
    <fail unless="plugin.slug" />
    <fail unless="plugin.version" />
    <fail unless="composer.path" />
    <fail message="Do not run as root!">
        <condition>
            <equals arg1="root" arg2="${user.name}"/>
        </condition>
    </fail>

    <!-- set version number in plugin-file for the release -->
    <target name="setVersionNumber">
        <delete file="${build.dir}/${plugin.slug}-release.php"/>
        <copy file="${src.dir}/${plugin.slug}.php" tofile="${src.dir}/${plugin.slug}-release.php"/>
        <replace file="${src.dir}/${plugin.slug}-release.php">
            <replacefilter token="@@VersionNumber@@" value="${plugin.version}" />
        </replace>
    </target>

    <!-- install composer -->
    <target name="composer-install">
        <delete file="${log.dir}/composer-install.txt"/>
        <exec dir="${src.dir}" failonerror="true" executable="${composer.path}" output="${log.dir}/composer-install.txt">
            <arg line="install"/>
        </exec>
        <delete file="${log.dir}/composer-update.txt"/>
        <exec dir="${src.dir}" failonerror="true" executable="${composer.path}" output="${log.dir}/composer-update.txt">
            <arg line="update"/>
        </exec>
    </target>

    <!-- generate documentation -->
    <target name="generate-documentation" depends="composer-install">
        <exec dir="${src.dir}" failonerror="false" executable="vendor/bin/wp-documentor">
            <arg line="parse classes --format=markdown --output=docs/hooks.md --prefix=eml_"/>
        </exec>
    </target>

    <!-- check WCS compatibility -->
    <target name="check-wcs" depends="composer-install">
        <exec dir="${src.dir}" failonerror="false" executable="vendor/bin/phpcbf">
            <arg line="--extensions=php --ignore=*/vendor/*,*/svn/* --standard=ruleset.xml ."/>
        </exec>
        <exec dir="${src.dir}" failonerror="true" executable="vendor/bin/phpcs">
            <arg line="--extensions=php --ignore=*/vendor/*,*/svn/* --standard=ruleset.xml ."/>
        </exec>
    </target>

    <!-- create release-zip -->
    <target name="build" description="builds a new release" depends="generate-documentation,setVersionNumber,check-wcs">
        <delete file="${build.dir}/${plugin.slug}_${plugin.version}.zip"/>
        <zip destfile="${build.dir}/${plugin.slug}_${plugin.version}.zip">
            <zipfileset dir="${src.dir}/admin" prefix="${plugin.slug}/admin" />
            <zipfileset dir="${src.dir}/classes" prefix="${plugin.slug}/classes" />
            <zipfileset dir="${src.dir}/inc" prefix="${plugin.slug}/inc" />
            <zipfileset dir="${src.dir}" includes="uninstall.php,readme.txt" prefix="${plugin.slug}" />
            <zipfileset dir="${src.dir}" includes="${plugin.slug}-release.php" fullpath="${plugin.slug}/${plugin.slug}.php" />
        </zip>
        <delete file="${src.dir}/${plugin.slug}-release.php"/>
    </target>

    <target name="help">
        <java classname="org.apache.tools.ant.Main">
            <arg value="-projecthelp" />
            <arg value="-buildfile" />
            <arg value="build.xml" />
        </java>
    </target>

</project>
